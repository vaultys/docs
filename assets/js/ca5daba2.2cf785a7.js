"use strict";(self.webpackChunksmartlink_doc=self.webpackChunksmartlink_doc||[]).push([[1588],{51347:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=i(86070),t=i(25710);const r={sidebar_position:2},o="1 DID",d={id:"develop/protocol/specifications/did",title:"1 DID",description:"1.1 General Form",source:"@site/docs/develop/protocol/specifications/did.md",sourceDirName:"develop/protocol/specifications",slug:"/develop/protocol/specifications/did",permalink:"/docs/develop/protocol/specifications/did",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"userguideSidebar",previous:{title:"Specifications",permalink:"/docs/develop/protocol/specifications/"},next:{title:"2 Web of Trust",permalink:"/docs/develop/protocol/specifications/wot"}},a={},c=[{value:"1.1 General Form",id:"11-general-form",level:3},{value:"1.1.1 Serialisation and deserialisation",id:"111-serialisation-and-deserialisation",level:4},{value:"1.1.2 Fingerprint",id:"112-fingerprint",level:4},{value:"1.1.3 DiD",id:"113-did",level:4},{value:"1.1.4 Secret",id:"114-secret",level:4},{value:"2.2 Defined Type",id:"22-defined-type",level:3},{value:"1.2.1 Type 3 serialisations",id:"121-type-3-serialisations",level:4},{value:"1.2.2 Type 3 signatures",id:"122-type-3-signatures",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"1-did",children:"1 DID"}),"\n",(0,s.jsx)(n.h3,{id:"11-general-form",children:"1.1 General Form"}),"\n",(0,s.jsx)(n.p,{children:"An Identifier (VaultysId) is a composed with"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["a type (1 byte) ",(0,s.jsx)(n.code,{children:"type"})]}),"\n",(0,s.jsxs)(n.li,{children:["a version (1 byte) ",(0,s.jsx)(n.code,{children:"v"})," = ",(0,s.jsx)(n.code,{children:"0"})]}),"\n",(0,s.jsxs)(n.li,{children:["a proof (32 byte) ",(0,s.jsx)(n.code,{children:"p"})]}),"\n",(0,s.jsxs)(n.li,{children:["a signing public key (variable) ",(0,s.jsx)(n.code,{children:"s"})]}),"\n",(0,s.jsxs)(n.li,{children:["an encrypting public key (variable) ",(0,s.jsx)(n.code,{children:"e"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"111-serialisation-and-deserialisation",children:"1.1.1 Serialisation and deserialisation"}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.code,{children:"messagepack"})," serialisation. MessagePack is a sort of JSON compressor ",(0,s.jsx)(n.a,{href:"https://msgpack.org/",children:"https://msgpack.org/"}),". The choice for this design is driven by the following consideration:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"we don't need a very small footprint for the data as storage size is not an issue"}),"\n",(0,s.jsx)(n.li,{children:"we want to be friendly enough for third part implementation, above all"}),"\n",(0,s.jsxs)(n.li,{children:["This serialisation is also used for saltpack  ",(0,s.jsx)(n.a,{href:"https://saltpack.org/",children:"https://saltpack.org/"})," in order to stream encrypted data and this can be leverage for the encryption part."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Caveats: Implementation can vary, ie VaultysId can vary if another implementation is used. Also it is possible to alter some part of the messagePack data and still deserialise to the same data."})," (see tests)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"VaultysId = type | messagepack({v, p, s, e})"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"\xa0Order of parameter of the message pack is important as it can influence the definition of the fingerprinting."})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Fingerprints may depends on message pack implementation."})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Fingerprints should NEVER be used at protocol level. It can be used as a way to index a list of VaultysId. It is not recommended to use fingerprints as key exchange verification (like in PGP key exchange)."})}),"\n",(0,s.jsx)(n.h4,{id:"112-fingerprint",children:"1.1.2 Fingerprint"}),"\n",(0,s.jsxs)(n.p,{children:["Fingerprint = ",(0,s.jsx)(n.code,{children:"sha224(VaultysId)"})]}),"\n",(0,s.jsx)(n.h4,{id:"113-did",children:"1.1.3 DiD"}),"\n",(0,s.jsxs)(n.p,{children:["Decentralised Id = ",(0,s.jsx)(n.code,{children:"did:vaultys:<fingerprint>"})]}),"\n",(0,s.jsx)(n.h4,{id:"114-secret",children:"1.1.4 Secret"}),"\n",(0,s.jsxs)(n.p,{children:["In order to backup VaultysId secrets the following serialization is used\n",(0,s.jsx)(n.code,{children:"secret = type | messagepack({v, p, ss, se})"}),"\nwhere:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ss"})," is the secret of public key ",(0,s.jsx)(n.code,{children:"s"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"se"})," is the secret of public key ",(0,s.jsx)(n.code,{children:"e"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"22-defined-type",children:"2.2 Defined Type"}),"\n",(0,s.jsxs)(n.p,{children:["There are 3 defined Types in the current state of the protocol\n",(0,s.jsx)(n.code,{children:"type"})," = ",(0,s.jsx)(n.code,{children:"0"}),": identifying a device (server, computer etc...)\n",(0,s.jsx)(n.code,{children:"type"})," = ",(0,s.jsx)(n.code,{children:"1"}),": identifying a person.\n",(0,s.jsx)(n.code,{children:"type"})," = ",(0,s.jsx)(n.code,{children:"3"}),": identifying a person through a Fido2 device."]}),"\n",(0,s.jsx)(n.h4,{id:"121-type-3-serialisations",children:"1.2.1 Type 3 serialisations"}),"\n",(0,s.jsx)(n.p,{children:"As there is no proof concept for Fido2, the following parameter are set:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"p"})," = 0000...0000"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," = COSE PublicKey as extracted by Fido2 Attestation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"e"})," is generated ",(0,s.jsx)(n.em,{children:"not"})," handled by Fido2 device"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["As there is no backup from Fido2 device as recommended by certification, the following secret is used in order to port the VaultysId on various devices:\n",(0,s.jsx)(n.code,{children:"secret = type |\xa0messagepack({v, fid, t, s, se})"}),"\nwhere:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fid"})," is the Fido2 id given by the attestation at creation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"t"})," is the webauthn ",(0,s.jsx)(n.strong,{children:"transport"})," used to connect to the device (in order to prevent from complex UI handling for the webauthn interface).\n",(0,s.jsx)(n.code,{children:"t = hybrid | ble | nfc | usb"}),"\nTerms ",(0,s.jsx)(n.code,{children:"hybrid"}),", ",(0,s.jsx)(n.code,{children:"ble"}),", ",(0,s.jsx)(n.code,{children:"nfc"}),", ",(0,s.jsx)(n.code,{children:"usb"})," are the one found in Fido2 specifications.\nfor instance t = ",(0,s.jsx)(n.code,{children:"0011"})," means that the Fido2 device can be reached only using NFC and USB transport"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For information our implementation for attestation creation is used with the following parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'navigator.credentials.create({\n  publicKey: {\n    challenge: randomBytes(32),\n    rp: {\n      name: "Vaultys ID",\n    },\n    user: {\n      id: Buffer.from("Vaultys ID", "utf-8"),\n      name: "Vaultys ID",\n      displayName: "Vaultys Wallet ID",\n    },\n    attestation: safari ? "none" : "direct",\n    authenticatorSelection: {\n      authenticatorAttachment: "cross-platform",\n      userVerification: "preferred"\n    },\n    pubKeyCredParams: [\n    {\n      "type": "public-key",\n      "alg": -7, // P256\n    },\n    {\n      "type": "public-key",\n      "alg": -8, // Ed25519/EdDSA\n    },\n    ]\n  }\n})\n'})}),"\n",(0,s.jsx)(n.h4,{id:"122-type-3-signatures",children:"1.2.2 Type 3 signatures"}),"\n",(0,s.jsx)(n.p,{children:"Webauthn signatures have their own payload, we use attestation for"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},25710:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(30758);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);